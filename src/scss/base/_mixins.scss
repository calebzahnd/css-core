/*********/
/* Mixins
/*********/

// Useful mixins downloaded from https://bitbucket.org/calebzahnd/sass-mixins

//The ol' cover EVERYTHING block. Handy.
@mixin coverer() {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

// A darn fine way to center something
@mixin centerer() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

//Vertical align in 3 lines of css.
@mixin vertical-align() {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

@mixin word-wrap() {
	word-break:	 break-word;
	-webkit-hyphens: auto;
	-moz-hyphens:	  auto;
	hyphens:		  auto;
}

@mixin ellipsis() {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

@mixin gradient($height: 100px, $color: color(black)) {
	&::after {
		content: "";
		position: absolute;
		left:0;
		bottom: -1px;
		height: $height;
		width: 100%;
		background: linear-gradient(to bottom, rgba($color, 0) 0%,rgba($color,0.65) 100%);
	}
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

@function black($opacity) {
	@return rgba(black, $opacity)
}
@function white($opacity) {
	@return rgba(white, $opacity)
}

// There's a lot of different clearfix hacks out there on the web. This one (http://nicolasgallagher.com/micro-clearfix-hack) I've found it to be the most solid one. Works in IE6 and up.
@mixin clearfix {
	*zoom: 1;
	&::before,
	&::after {
		content: " ";
		display: table;
	}
	&::after {
		clear: both;
	}
}

%clearfix {
	@include clearfix();
}
.clearfix {
	@include clearfix();
}

//Colors
@function color($color) {
	@return map-get($colors, $color);
}

@mixin hover {
	&:hover,
	&:focus,
	&:active {
		@content;
	}
}

//Iconfont
@mixin iconfont($content: " ", $font-size: inherit, $color: inherit ) {
	font-family: $font-iconfont;
	speak: none;
	font-style: normal;
	font-weight: 100;
	font-variant: normal;
	text-transform: none;
	line-height: 1;
	content: $content;
	font-size: $font-size;
	color: $color;
	
	/* Better Font Rendering =========== */
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin object-fit($width:100%, $height:100%) {
	object-fit: cover;
	object-position: center center;
	width:$width;
	height:$height;
}

.object-fit {
	@include object-fit();
}

//Good way to hide something but have it still be accessible to screen-readers
@mixin visuallyhidden {
	position: absolute;
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
}

%isVisuallyHidden {
	@include visuallyhidden();
}


//Uses the Sass-Map defined in partials/variables.scss
@mixin z-index($level: ground, $important: 'null') {
	@if ($important == 'important')
	{
		z-index: map-get($z-index, $level) !important;
	}
	@else {
		z-index: map-get($z-index, $level);
	}
}

// Sass function map-get-next
// From https://gist.github.com/agorilla/9df052eb1e15d8aea446
@function map-get-next($map, $key, $fallback: false) {

	// Check if map is valid
	@if type_of($map) == map {

		// Check if key exists in map
		@if map_has_key($map, $key) {

			// Init index counter variable
			$i: 0;

			// Init key index
			$key-index: false;

			// Traverse map for key
			@each $map-key, $map-value in $map {
				// Update index
				$i: $i + 1;

				// If map key found, set key index
				@if $map-key == $key {
					$key-index: $i;
				}

				// If next index return next value
				@if $i == $key-index + 1 {
					@return $map-value;
				}

				// If last entry return false
				@if $i == length($map) {
					@return $fallback;
				}
			}

			@warn 'No next map item for key #{$key}';
			@return $fallback;
		}

		@warn 'No valid key #{$key} in map';
		@return $fallback;
	}

	@warn 'No valid map';
	@return $fallback;
}


//Custom breakpoint mixin
@mixin screen($breakpoint, $query: 'min') {
	@if ($query == 'min') {		
		@media only screen and (min-width: map-get($grid-breakpoints, $breakpoint)) {
			@content;
		}
	}
	@if ($query == 'max') {
		@media only screen and (max-width: (map-get-next($grid-breakpoints, $breakpoint) - 1)) {
			@content;
		}
	}
	
	@if ($query == 'only') {
		@media only screen and (min-width: map-get($grid-breakpoints, $breakpoint)) and (max-width: (map-get-next($grid-breakpoints, $breakpoint) - 1)) {
			@content;
		}
	}
}

@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@mixin font-size($values) {
	$px : ();
	$rem: ();
	
	@each $value in $values {

		@if $value == 0 or $value == auto {
			$px : append($px , $value);
			$rem: append($rem, $value);
		}

		@else {
			$unit: unit($value);	 
			$val: parseInt($value);
		
			@if $unit == "px" { 
				$px : append($px,  $value);
				$rem: append($rem, ($val / 10 + rem));
			}
		
			@if $unit == "rem" {
				$px : append($px,  ($val * 10 + px));
				$rem: append($rem, $value);
			}
		}
	}

	@if $px == $rem {		  
		font-size: $px; 
	} @else {
		font-size: $px; 
		font-size: $rem;
	}
}
